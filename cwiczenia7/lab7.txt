ETAP Algebra map
PRZYKLAD 1
CREATE TABLE schema_name.porto_ndvi AS 
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, 1,
r.rast, 4,
'([rast2.val] - [rast1.val]) / ([rast2.val] + 
[rast1.val])::float','32BF'
) AS rast
FROM r;
----------------------------------------------
CREATE INDEX idx_porto_ndvi_rast_gist ON schema_name.porto_ndvi
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('schema_name'::name, 
'porto_ndvi'::name,'rast'::name);
----------------------------------------------
PRZYKLAD 2
create or replace function schema_name.ndvi(
value double precision [] [] [], 
pos integer [][],
VARIADIC userargs text []
)
RETURNS double precision AS
$$
BEGIN
--RAISE NOTICE 'Pixel Value: %', value [1][1][1];-->For debug purposes
RETURN (value [2][1][1] - value [1][1][1])/(value [2][1][1]+value 
[1][1][1]); --> NDVI calculation!
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE COST 1000;

CREATE TABLE schema_name.porto_ndvi2 AS 
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, ARRAY[1,4],
'schema_name.ndvi(double precision[], 
integer[],text[])'::regprocedure, --> This is the function!
'32BF'::text
) AS rast
FROM r;
----------------------------------------------
CREATE INDEX idx_porto_ndvi2_rast_gist ON schema_name.porto_ndvi2
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('schema_name'::name, 
'porto_ndvi2'::name,'rast'::name);
----------------------------------------------
PRZYKLAD 3
zostal przeanalizowany

ETAP Eksport danych
----------------------------------------------
PRZYKLAD 0
----------------------------------------------
PRZYKLAD 1
SELECT ST_AsTiff(ST_Union(rast))
FROM schema_name.porto_ndvi;
----------------------------------------------
PRZYKLAD 2
SELECT ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE', 
'PREDICTOR=2', 'PZLEVEL=9'])
FROM schema_name.porto_ndvi;

SELECT ST_GDALDrivers();
----------------------------------------------
PRZYKLAD 3
CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
 ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE', 'PREDICTOR=2', 'PZLEVEL=9'])
 ) AS loid
FROM schema_name.porto_ndvi;
----------------------------------------------
SELECT lo_export(loid, 'C:\Users\Patryk\Desktop\Patryk\Studia\Semestr_VII\Bazy_danych_przestrzennych\Laboratoria\Laboratoria_07\myraster.tiff') --> Save the file in a place 
-- where the user postgres have access. In windows a flash drive usualy works 
-- fine.
 FROM tmp_out;
----------------------------------------------
SELECT lo_unlink(loid)
 FROM tmp_out; --> Delete the large object.
----------------------------------------------
PRZYKLAD 4
gdal_translate -co COMPRESS=DEFLATE -co PREDICTOR=2 -co ZLEVEL=9 PG:"host=localhost port=5432 dbname=cw6 user=postgres password=postgis schema=schema_name table=porto_ndvi mode=2" porto_ndvi.tiff
----------------------------------------------
ETAP Publikowanie danych za pomocÄ… MapServer
----------------------------------------------
PRZYKLAD 1
create table schema_name.tpi30_porto as
SELECT ST_TPI(a.rast,1) as rast
FROM rasters.dem AS a, vectors.porto_parishes AS b 
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto'

CREATE INDEX idx_tpi30_porto_rast_gist ON schema_name.tpi30_porto
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('schema_name'::name, 
'tpi30_porto'::name,'rast'::name);
